# Basic AWS CLIs
# https://docs.aws.amazon.com/cli/latest/userguide/welcome-examples.html

sudo apt install awscli

aws --version

aws configure
 - AWS Access Key ID
 - AWS Secret Access Key
 - Default region name


# Multiple profile
# https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/cli-configure-profiles.html

aws configure --profile bob


# check output

json, text, table

aws ec2 describe-regions --output text
aws ec2 describe-regions --output table
aws ec2 describe-regions --output json



# ec2
# https://docs.aws.amazon.com/ko_kr/cli/latest/reference/ec2/describe-instances.html

aws ec2 describe-instances

aws ec2 create-key-pair --key-name my-keypair --query 'KeyMaterial' --output text > my-keypair.pem

aws ec2 create-security-group --group-name my-group-sg --description "Security group for my instance"

aws ec2 authorize-security-group-ingress --group-name my-group-sg --protocol tcp --port 22 --cidr 0.0.0.0/0

aws ec2 run-instances --image-id ami-0454bb2fefc7de534 --count 1 --instance-type t2.micro --key-name my-keypair --security-groups my-group-sg

aws ec2 describe-instances

aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,State.Name,LaunchTime,PublicIpAddress]'

aws ec2 describe-instances --query 'Reservations[*].Instances[*].{Name:Tags[?Key==`Name`]|[0].Value,Id:InstanceId,State:State.Name,Launch:LaunchTime,PublicIP:PublicIpAddress,Key:SecurityGroups[0].GroupName}' --output table



# iam
# https://docs.aws.amazon.com/cli/latest/reference/iam/

aws iam create-user --user-name my-user

aws iam create-group --group-name my-group

aws iam add-user-to-group --user-name my-user --group-name my-group

aws iam get-group --group-name my-group

cat > my-policy.json << EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "NotAction": "iam:",
            "Resource": "*"
        }
    ]
}
EOF

aws iam put-user-policy --user-name my-user --policy-name my-power-user-role --policy-document file://my-policy.json

aws iam list-user-policies --user-name my-user

aws iam create-login-profile --user-name my-user --password "abcd1234!"
aws iam update-login-profile --user-name my-user --password "abcd1234@"

aws iam create-access-key --user-name my-user


## clean up the created iam user
# https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli

aws iam delete-user --user-name my-user

aws iam list-access-keys

aws iam list-access-keys --user-name my-user

aws iam delete-access-key --user-name my-user --access-key-id XXXXXXXX

aws iam delete-login-profile --user-name my-user

aws iam list-user-policies --user-name my-user

aws iam delete-user-policy --user-name my-user --policy my-power-user-role

aws iam list-groups-for-user --user-name my-user

aws iam remove-user-from-group --user-name my-user --group-name my-group

aws iam delete-user --user-name my-user

aws iam delete-group --group-name my-group



## ECS 용 필요한 권한 설정

### 그룹 자체에 줄 경우 (ECR + ECS 추가 및 삭제 명령어)

aws iam list-groups 

aws iam list-attached-group-policies --group-name BoB10

aws iam attach-group-policy --group-name BoB10 --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
aws iam attach-group-policy --group-name BoB10 --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess

aws iam detach-group-policy --group-name BoB10 --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
aws iam detach-group-policy --group-name BoB10 --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess


### 개별 사용자에게 줄 경우 (ECS 만 예시로...)

aws iam attach-user-policy --user-name ecs-user --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess

aws iam detach-user-policy --user-name ecs-user --policy-arn arn:aws:iam::aws:policy/AmazonECS_FullAccess



## ECS 용 필요한 Role 생성
# https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/task_execution_IAM_role.html

aws iam list-roles

cat > ecs-tasks-trust-policy.json << EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF

aws iam create-role --role-name ecsTaskExecutionRole --assume-role-policy-document file://ecs-tasks-trust-policy.json

aws iam attach-role-policy --role-name ecsTaskExecutionRole --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

aws iam get-role --role-name ecsTaskExecutionRole


## Role(역할) 이란?
- AWS 서비스를 요청하기 위한 "권한 세트" 를 정의하는 IAM 기능.
- 역할의 큰 특징은 IAM 사용자나 IAM 그룹에는 연결되지 않는다는 것.
- 대신 신뢰할 수 있는 IAM 사용자나 애플리케이션 또는 AWS 서비스(예: EC2)가 역할을 맡을 수 있다.

- 역할을 맡게 되는 과정을 "임시 보안 자격 증명" 이라고 한다.


aws s3 ls
An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied

aws sts assume-role --role-arn arn:aws:iam::7805xxxxxxxx:role/S3BucketListReadOnlyRole --role-session-name "my-s3-access-role"
An error occurred (AccessDenied) when calling the AssumeRole operation: User: arn:aws:iam::7805xxxxxxxx:user/xxxxxxxx is not authorized to perform: sts:AssumeRole on resource:



