# AWS 리포 생성

===== ECR =====

# ECR 리포지토리 생성
# 앱 이름을 정하고 (tutorial-flask-app) 각 AWS 계정 ARN 을 기반으로 리포명이 정해져 있음
# 해당 앱 이름을 만들면 그 후로는 tag 버전만이 붙어서 올라감

xxxxxxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com/tutorial-flask-app


# 리포 접속

## AWS CLI 설정

sudo apt install awscli
aws configure
 - AWS Access Key ID
 - AWS Secret Access Key
 - Default region name


## AWS ECR 로그인
aws ecr get-login --no-include-email
- 위에 명령을 실행하면 docker login 으로 시작하는 명령어가 나옴
- 해당 명령으로 docker login을 하면 24시간 동안 로그인이 유효함


docker login -u AWS -p eyJwYXlsb2FkI...<중략>...czfQ== https://7805xxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com

docker tag flask-app:1.2 7805xxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com/tutorial-flask-app:1.2

docker push 7805xxxxxxxx.dkr.ecr.ap-northeast-2.amazonaws.com/tutorial-flask-app:1.2



===== ECS =====

# 개념 설명
# https://aws.amazon.com/ko/ecs/features/?pg=ln&sec=gs
# https://aws.amazon.com/ko/blogs/compute/building-blocks-of-amazon-ecs/

## Cluster infra
Fargate vs EC2
 - Fargate : Serverless container hosting
 - EC2 : Computing instance


## 구성 요소
 - Cluster : 배포 될 인프라
 - Task : 컨테이너 실행 최소 단위 (1개 혹은 1개 이상의 컨테이너)
 - Task definition : 컨테이너 실행 명세
 - Service : 작업을 묶은 단위


## 계층 구조
Container definition < Task definition < Service < Cluster


Task definition (작업 정의) 을 통해 ECS에서 실행될 작업 정의를 생성 (하나 또는 그 이상의 컨테이너 실행 정의)

https://docs.aws.amazon.com/ko_kr/AmazonECS/latest/developerguide/getting-started-fargate.html


EC2 -> Auto scaling Group -> ELB -> 배포 -> AMI 이미지 생성 -> Configuration 생성 -> Auto Scaling Group 연동...

Fargate -> Cluster 생성 -> ECR 생성 -> Dockerfile 작성/수정 -> Image ECR에 Push -> Task definition -> 서비스 생성

Fargate -> Cluster 생성 -> ECR 생성 -> Dockerfile 작성/수정 -> Image ECR에 Push -> Task definition -> 서비스 생성 -> ELB 생성 -> Update 서비스


## CLI 설정 명령
- https://docs.aws.amazon.com/cli/latest/reference/ecs/index.html

aws ecs list-clusters

aws ecs list-tasks --cluster my-ecs-cluster


aws ecs list-task-definitions

aws ecs list-task-definition-families


aws ecs list-services --cluster my-ecs-cluster


aws ecs register-task-definition

aws ecs deregister-task-definition


aws ecs register-task-definition --container-definitions



## Hands-on python lab
- https://hands-on.cloud/working-with-ecs-in-python-using-boto3/
- https://hands-on.cloud/working-with-ec2-instances-using-boto3-in-python/



# 요약 프로세스
deploy_image
  - docker login -u -p
  - docker push

deploy_cluster
  - make_task_def
    - setup json
  - register_definition
    - aws ecs register-task-definition --container-definitions xxxx-task-def --family xxxx 
  - aws ecs update-service --cluster xxxx-ecs --service xxxx-ecs-service --task-definition xxxx
  - check for older version
    - aws ecs describe-services --cluster xxxx-ecs --services xxxx-ecs-service

  => task_template = [
    {
      "name": "uwsgi",
      "image": "xxxxxxxx/xxxx-ecs:%s",
      "essential": true,
      "memory": 200,
      "cpu": 10
    },
    {
      "name": "nginx",
      "links": [
        "uwsgi"
      ],
      "image": "xxxxxxxx/xxxx-base:latest",
      "portMappings": [
        {
          "containerPort": 8000,
          "hostPort": %s
        }
      ],
      "cpu": 10,
      "memory": 200,
      "essential": true
    }
  ]


